<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_azure_automa.AzureAutomationUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>AzureAutomationUtils</name>
        <script><![CDATA[var AzureAutomationUtils = Class.create();
AzureAutomationUtils.prototype = {
    initialize: function() {
    },

	validateInputVariables: function(inputs, outputs) {
        for (var key in inputs) {
            var value = inputs[key];
            if (typeof value == 'string')
                inputs[key] = value.trim();
            else
                inputs[key] = value;
        }
        return inputs;
    },

    validateMandatoryVariables: function(obj, keys) {
        keys.forEach(function(key) {
            if (!obj[key])
                throw new Error("Error while executing, mandatory information isn't passed in " + key);
        });
    },

    mapToOutputFromInput: function(inputs, outputs, keys) {
        if (keys.length <= 0)
            for (var key in inputs) {
                outputs[key] = inputs[key];
            } else {
                keys.forEach(function(key) {
                    outputs[key] = inputs[key];
                });
            }
        return outputs;
    },
	
	createAccount: function(inputs, outputs) {
        var payload = {};
		payload.name = inputs.account_name;
		if(inputs.location)
			payload.location = inputs.location;
		var inputTags = inputs.tags;
        if (inputTags.length > 0) {
            var tags = {};
            inputTags.forEach(function(property) {
                if (property.Key.trim() && property.Value.trim()) {
                    tags[property.Key] = property.Value;
                }
            });
        }
       if(JSON.stringify(tags) != '{}')
            payload.tags = tags;
		var properties = {};
		var sku = {};
		if(inputs.sku.family)
			sku.family = inputs.sku.family;
		if(inputs.sku.capacity)
			sku.capacity = inputs.sku.capacity;
		if(inputs.sku.name)
			sku.name = inputs.sku.name;
		if(JSON.stringify(sku) != '{}')
			properties.sku = sku;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createRunbook: function(inputs, outputs) {
        var payload = {};
		payload.name = inputs.runbook_name;
		if(inputs.location)
			payload.location = inputs.location;
		var inputTags = inputs.tags;
        if (inputTags.length > 0) {
            var tags = {};
            inputTags.forEach(function(property) {
                if (property.Key.trim() && property.Value.trim()) {
                    tags[property.Key] = property.Value;
                }
            });
        }
        if(JSON.stringify(tags) != '{}')
            payload.tags = tags;
		var properties = {};
		if(inputs.description)
			properties.description = inputs.description;
		if(inputs.log_verbose)
			properties.logVerbose = inputs.log_verbose;
		if(inputs.runbook_type)
			properties.runbookType = inputs.runbook_type;
		if(inputs.log_progress)
			properties.logProgress = inputs.log_progress;
		var publishContentLink = {};
		if(inputs.content.uri)
			publishContentLink.uri = inputs.content.uri;
		if(inputs.content.version)
			publishContentLink.version = inputs.content.version;
		var contentHash = {};
		if(inputs.content.content_hash.algorithm)
			contentHash.algorithm = inputs.content.content_hash.algorithm;
		if(inputs.content.content_hash.value)
			contentHash.value = inputs.content.content_hash.value;
		if(JSON.stringify(contentHash) != '{}')
			publishContentLink.contentHash = contentHash;
		if(JSON.stringify(publishContentLink) != '{}')
		properties.publishContentLink = publishContentLink;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createJob: function(inputs, outputs) {
        var payload = {};
		if(inputs.runon)
			payload.runOn = inputs.runon;
		var params = inputs.parameters;
        if (params.length > 0) {
            var param = {};
            params.forEach(function(property) {
                if (property.Name.trim() && property.Value.trim()) {
                    param[property.Name] = property.Value;
                }
            });
        }
		var properties = {};
        properties.parameters = param;
		var runbook = {};
		if(inputs.runbook_name)
			runbook.name = inputs.runbook_name;
		properties.runbook = runbook;
		payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createJobSchedule: function(inputs, outputs) {
        var payload = {};
		var properties = {};
		if(inputs.run_on)
			properties.runOn = inputs.run_on;
		var params = inputs.parameters;
        if (params.length > 0) {
            var param = {};
            params.forEach(function(property) {
                if (property.Name.trim() && property.Value.trim()) {
                    param[property.Name] = property.Value;
                }
            });
        }
        payload.parameters = param;
		var runbook = {};
		if(inputs.runbook_name)
			runbook.name = inputs.runbook_name;
		properties.runbook = runbook;
		var schedule = {};
		if(inputs.schedule_name)
			schedule.name = inputs.schedule_name;
		properties.schedule = schedule;
		payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createSchedule: function(inputs, outputs) {
        var payload = {};
		var properties = {};
		payload.name = inputs.schedule_name;
		if(inputs.description)
			properties.description = inputs.description;
		if(inputs.start_time)
			properties.startTime = inputs.start_time;
		if(inputs.expiry_time)
			properties.expiryTime = inputs.expiry_time;
		if(inputs.frequency)
			properties.frequency = inputs.frequency;
		if(inputs.interval)
			properties.interval = inputs.interval;
		if(inputs.time_zone)
			properties.timeZone = inputs.time_zone;
		var advance = {};
		if(inputs.advance.Month_Days > 0){
			inputs.advance.Month_Days.forEach(function(property){
				var days = [];
				days.push(property);
				if (days.length > 0)
                    advance.monthDays = days;
            });
		}
		if(inputs.advance.Monthly_Occurrences.Day && inputs.advance.Monthly_Occurrences.Occurence){
			var occuracne = {};
			occuracne.day = inputs.advance.Monthly_Occurrences.Day;
			occuracne.occurance = inputs.advance.Monthly_Occurrences.Occurence;	
			if(occuracne!= null)
				advance.monthlyOccurrences = occuracne;
		}
	
		if(inputs.advance.Week_Days > 0){
			inputs.advance.Week_Days.forEach(function(property){
				var week = [];
				week.push(property);
				if (week.length > 0)
                    advance.weekDays = week;
            });
		}
		if(JSON.stringify(advance) != '{}')
			properties.advancedSchedule = advance;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	updateSchedule: function(inputs, outputs) {
        var payload = {};
		var properties = {};
		payload.name = inputs.schedule_name;
		if(inputs.description)
			properties.description = inputs.description;
		if(inputs.isEnabled)
			properties.isEnabled = inputs.enabled;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
		
	createWatcher: function(inputs, outputs) {
        var payload = {};
		var properties = {};
		payload.name = inputs.watcher_name;
		if(inputs.runon)
			properties.scriptRunOn = inputs.runon;
		if(inputs.frequency)
			properties.executionFrequencyInSeconds = inputs.frequency;
		if(inputs.runbook_name)
			properties.scriptName = inputs.runbook_name;
		if(inputs.description)
			properties.description = inputs.description;
		var params = inputs.parameters;
        if (params.length > 0) {
            var param = {};
            params.forEach(function(property) {
                if (property.Name.trim() && property.Value.trim()) {
                    param[property.Name] = property.Value;
                }
            });
        }
        properties.scriptParameters = param;
		var inputTags = inputs.tags;
        if (inputTags.length > 0) {
            var tags = {};
            inputTags.forEach(function(property) {
                if (property.Key.trim() && property.Value.trim()) {
                    tags[property.Key] = property.Value;
                }
            });
        }
		payload.tags = tags;
		payload.properties = properties;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createConfiguration: function(inputs, outputs) {
        var payload = {};
		if(inputs.location)
			payload.location = inputs.location;
		if(inputs.configuration_name)
			payload.name = inputs.configuration_name;
		var properties = {};
		if(inputs.description)
			properties.description = inputs.description;
		var content = {};
		if(inputs.content.Content)
			content.value = inputs.content.Content;
		if(inputs.content.Version)
			content.version = inputs.content.Version;
		if(inputs.content.Type)
			content.type = inputs.content.Type;
		var hash = {};
		if(inputs.content.Hash.Algorithm)
			hash.algorithm = inputs.content.Hash.Algorithm;
		if(inputs.content.Hash.Value)
			hash.value = inputs.content.Hash.Value;
		if(JSON.stringify(hash) != '{}')
			content.hash = hash;
		if(JSON.stringify(content) != '{}')
			properties.source = content;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
		var inputTags = inputs.tags;
        if (inputTags.length > 0) {
            var tags = {};
            inputTags.forEach(function(property) {
                if (property.Name.trim() && property.Value.trim()) {
                    tags[property.Name] = property.Value;
                }
            });
        }
		if(JSON.stringify(tags) != '{}')
            payload.tags = tags;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
	createCompileJob: function(inputs, outputs) {
        var payload = {};
		if(inputs.location)
			payload.location = inputs.location;
		if(inputs.compilation_job_name)
			payload.name = inputs.compilation_job_name;
		var properties = {};
		var config = {};
		if(inputs.configuration_name)
			config.name = inputs.configuration_name;
		properties.configuration = config;
		if(JSON.stringify(properties) != '{}')
			payload.properties = properties;
		var inputTags = inputs.tags;
        if (inputTags.length > 0) {
            var tags = {};
            inputTags.forEach(function(property) {
                if (property.Name.trim() && property.Value.trim()) {
                    tags[property.Name] = property.Value;
                }
            });
        }
		if(JSON.stringify(tags) != '{}')
            payload.tags = tags;
        outputs.payload = JSON.stringify(payload);
        return outputs;
    },
	
    type: 'AzureAutomationUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-05 17:29:46</sys_created_on>
        <sys_id>3fb98dca1bb1101050dd41d4bd4bcbd6</sys_id>
        <sys_mod_count>36</sys_mod_count>
        <sys_name>AzureAutomationUtils</sys_name>
        <sys_package display_value="Azure Automation Spoke" source="x_snc_azure_automa">ae44450a1bb1101050dd41d4bd4bcb4a</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Azure Automation Spoke">ae44450a1bb1101050dd41d4bd4bcb4a</sys_scope>
        <sys_update_name>sys_script_include_3fb98dca1bb1101050dd41d4bd4bcbd6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-07-20 18:58:32</sys_updated_on>
    </sys_script_include>
</record_update>
